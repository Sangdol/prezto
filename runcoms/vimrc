"
" Sangdol's Vim Configuration
"

" set <Leader>
let mapleader="\<Space>"
set nocompatible              " be iMproved, required
filetype off                  " required

" Vundle {{{
"
" Install
" $ git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" Optional plugins
Plugin 'vim-scripts/taglist.vim'
Plugin 'Lokaltog/vim-easymotion'  " :h easymotion.txt
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/syntastic'
Plugin 'kchmck/vim-coffee-script'
Plugin 'mileszs/ack.vim'  " :h ack
Plugin 'vim-scripts/VOoM' " :Voomhelp
Plugin 'tpope/vim-surround' " :h surround
Plugin 'danro/rename.vim'
Plugin 'vim-scripts/sql.vim--Stinson'
Plugin 'tpope/vim-fugitive'
Plugin 'vim-scripts/Align'
Plugin 'vim-scripts/SQLUtilities' " Dependant on Align plugin - [range]SQLUFormatter(..list..)
Plugin 'chrisbra/Recover.vim' " :FinishRecovery - in the recovered window, deletes swapfile closes the diff window and finishes everything up
Plugin 'evanmiller/nginx-vim-syntax'

" Not being used
" Plugin 'mattn/emmet-vim' (HTML related)
" Plugin 'captbaritone/better-indent-support-for-php-with-html' " https://github.com/captbaritone/better-indent-support-for-php-with-html

" easymotion
" <Leader><Leader>w - word motion
" <Leader><Leader>j/k - down/up
" <Leader><Leader>f + <character> - jump to the character
let g:EasyMotion_smartcase = 1
let g:EasyMotion_use_smartsign_us = 1 " US layout

" VOom
nnoremap <silent> <Leader>mm :Voom markdown<CR>
nnoremap <silent> <Leader>mt :Voomtoggle<CR>
nnoremap <silent> <Leader>mq :Voomquit<CR>
let g:voom_tree_width = 45

" SQLUtilities
vnoremap <Leader>ms :SQLUFormatter<CR>

" NerdCommenter
nmap <silent> <C-_> <Leader>c<Space>

" emmet https://github.com/mattn/emmet-vim
" let g:user_emmet_leader_key='<C-L>'

" https://coderwall.com/p/ftqcla/markdown-with-fenced-code-blocks-in-vim
" https://github.com/github/linguist/blob/master/lib/linguist/languages.yml
let g:markdown_fenced_languages = ['coffee', 'css', 'javascript', 'js=javascript', 'json=javascript', 'ruby', 'sql', 'xml', 'java', 'python', 'sh', 'html', 'clojure', 'yaml', 'applescript']

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" }}}

" Auto Commands {{{

" Automatically cd into the directory that the file is in
" https://github.com/tpope/vim-fugitive/issues/3
autocm BufEnter * if expand('%:p') !~ '://' | :lchdir %:p:h | endif

" Remove any trailing whitespace that is in the file
autocmd BufRead,BufWrite * if ! &bin | silent! %s/\s\+$//ge | endif

" Improve syntax highlighting
autocmd BufRead,BufNewFile *.md set filetype=markdown

" for html close tag shortcut
autocmd FileType html set omnifunc=xmlcomplete#CompleteTags

"}}}

" Misc Settings {{{

" Use vim settings, rather then vi settings
" This must be first, because it changes other options as a side effect.
set nocompatible

" Folding Stuffs
set foldmethod=marker

" Needed for Syntax Highlighting
filetype plugin indent on
syntax enable

" Default tab settings
set smarttab
set shiftround
set shiftwidth=2
set softtabstop=2 " for backspace
set tabstop=2
set expandtab
set autoindent

autocmd FileType python setlocal shiftwidth=4 softtabstop=4 tabstop=4
autocmd FileType java setlocal shiftwidth=4 softtabstop=4 tabstop=4

" Cool tab completion stuff
set wildmenu
set wildmode=list:longest,full

" Show line numbers
set number

" Search settings
set ignorecase
set incsearch
set hlsearch

" Backspace on EOL, start, indent
set backspace=eol,start,indent

set history=1000
set undolevels=1000

" You should make the directories
set backup
set backupdir=~/.vim/backup
set directory=~/.vim/swap

" encoding and line ending settings
set encoding=utf8
set fileencodings=utf8,cp949,latin1
set fileformat=unix
set fileformats=unix,dos

"}}}
"
"{{{Look and Feel

set background=dark

if has("gui_running")
	colorscheme Tomorrow-Night
	set guioptions-=T " Remove Toolbar
	set guifont=나눔고딕코딩:h13:cHANGEUL

	" Redefine menus for Korean
	let $LANG = 'ko_KR.UTF-8'
	source $VIMRUNTIME/delmenu.vim
	source $VIMRUNTIME/menu.vim
else
	colorscheme Tomorrow-Night-Bright
	" Enable mouse support in terminal
	set mouse=a
endif

"Status line
set laststatus=2
set statusline=%F%m%r%h%w\ (%{&ff}){%Y}\ [%l,%v][%p%%]\ %{strftime(\"%y/%m/%d\")}

" }}}

"{{{ Functions

" Open URL in browser
function! Browser()
	let line = getline(".")
	let line = matchstr(line, "http[^ `]*")
	" Should escape to prevent replaced with registers
	let line = escape(line, "#?&;|%")
	if !empty(line)
		if has("mac")
      " Need chrome script in $PATH
			exec "!open ".line
		elseif has("unix")
			exec "!google-chrome ".line
		endif
	else
		echo "No URL found"
	endif
endfunction

" Open browser
nnoremap <Leader>b :call Browser()<CR>

" Paste Toggle
let paste_mode = 0 " 0 = normal, 1 = paste
func! Paste_on_off()
  if g:paste_mode == 0
      set paste
    let g:paste_mode = 1
  else
    set nopaste
    let g:paste_mode = 0
  endif
  return
endfunc

" Make current file executable
nnoremap <F2> :!chmod +x %<CR>

" Run current line
nnoremap <F3> Y:@"<CR>

" Run current line on shell
nnoremap <F4> :.w !bash<CR>

" Run current file on shell
nnoremap <F5> :w<CR> :!./%<CR>

" Run current file on shell and read result
nnoremap <F6> :w<CR> :r !./%<CR>

" Paste Mode!
nnoremap <silent> <F9> :call Paste_on_off()<CR>
set pastetoggle=<F9>

"}}}

"{{{ Mappings
"
" New Tab
nnoremap <C-t> :tabnew<CR>

" Next Tab
nnoremap <silent> <C-k> :tabnext<CR>

" Previous Tab
nnoremap <silent> <C-j> :tabprevious<CR>

" New Tab
nnoremap <silent> <C-t> :tabnew<CR>

" Edit vimrc
nnoremap <silent> <Leader>ev :tabnew<CR>:e ~/.vimrc<CR>

" Up and down are more logical with g..
nnoremap <silent> k gk
nnoremap <silent> j gj
vnoremap <silent> k gk
vnoremap <silent> j gj
inoremap <silent> <Up> <Esc>gka
inoremap <silent> <Down> <Esc>gja

" Space will toggle folds!
" nnoremap <space> za

" Scroll to put the searched word in the middle
map N Nzz
map n nzz

" Turn off highlight
nnoremap <silent> <Leader>n :noh<CR>

" Easy escape
inoremap jk <Esc>

" Diff shortcuts
nnoremap <silent> <Leader>dl :diffthis<CR> <C-w>l :diffthis<CR> <C-w>h
nnoremap <silent> <Leader>dh :diffthis<CR> <C-w>h :diffthis<CR> <C-w>l
nnoremap <silent> <leader>do :diffoff<CR>

" Delete all
nnoremap <silent> <Leader>dd ggdG

" Open help page about a word under cusor
nnoremap <leader>h :h <C-r><C-w><CR>

" Yank all
nnoremap <Leader>a :%y<CR>

" Move between windows
let i = 1
while i <= 9
  execute 'nnoremap <Leader>' . i . ' :' . i . 'wincmd w<CR>'
  let i = i + 1
endwhile

" Close windows
let i = 1
while i <= 9
  execute 'nnoremap <Leader>c' . i . ' :' . i . 'wincmd w<CR>:q<CR>'
  let i = i + 1
endwhile


" Easy buffer switch
nnoremap <silent> <Leader>;; :b#<CR>
nnoremap <C-L> :ls<CR>:b<SPACE>

let i = 1
while i <= 9
  execute 'nnoremap <Leader>;' . i . ' :b' . i . '<CR>'
  let i = i + 1
endwhile

" Easy load
nnoremap <leader>l :e<SPACE>

" Mistake proofing
cnoremap W<CR> w<CR>
cnoremap Q<CR> q<CR>
cnoremap Q!<CR> q!<CR>
cnoremap Wq<CR> wq<CR>

" Change cursor shape in different modes(In OSX)
" http://vim.wikia.com/wiki/Change_cursor_shape_in_different_modes
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"

" Toggle invisibles
set lcs=tab:›\ ,trail:·,eol:¬,nbsp:_
set fcs=fold:-
nnoremap <silent> <leader>i :set nolist!<CR>

" Create Blank Newlines and stay in Normal mode
" http://superuser.com/a/607193/81915
nnoremap <silent> zj :call append(line('.'), '')<CR>
nnoremap <silent> zk :call append(line('.')-1, '')<CR>

nnoremap <silent> zh i<Space><Right><Esc>
nnoremap <silent> zl a<Space><Left><Esc>

" Save with root permission inside Vim
cmap w!! w !sudo tee > /dev/null %

" Open new window
nnoremap <leader>wh :vnew<CR>
nnoremap <leader>wl :rightbelow vertical new<CR>
nnoremap <leader>wj :below new<CR>

" Clock
nnoremap <Leader>da :echo system("date")<CR>

nnoremap <Leader>s :w<CR>
nnoremap <Leader><Leader>s :set spell!<CR>

nnoremap <Leader>q :q<CR>

vnoremap <Leader>p "0p


" Start new line (Shift+Enter in IntelliJ, which is not mappable in terminal Vim)
" http://stackoverflow.com/questions/598113/can-terminals-detect-shift-enter-or-control-enter
inoremap <C-l> <ESC>A<CR>
nnoremap <Leader>mj :%!python -m json.tool<CR>
"}}}

" OS Specific {{{

if has("mac")
  " From Vim 7.3, it can yank to and paste from clipboard
  set clipboard=unnamed
else
  " For x window. From Vim 7.3.74
  set clipboard=unnamedplus
endif

" }}}

