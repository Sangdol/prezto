"
" Sangdol's Vim Configuration
"

" set <Leader>
let mapleader="\<Space>"
set nocompatible              " be iMproved, required
filetype off                  " required

" Vim Plug {{{
"
" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

function! BuildYCM(info)
  if a:info.status == 'installed' || a:info.force
    !./install.sh --tern-completer " only for js
  endif
endfunction

" Optional plugins
"
" Plug Commands
" PlugInstall [name ...]
" PlugUpdate [name ...]
" PlugClean[!]
" PlugUpgrade
" PlugStatus
Plug 'vim-scripts/taglist.vim'
Plug 'Lokaltog/vim-easymotion'  " :h easymotion.txt
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/syntastic'
Plug 'mileszs/ack.vim'  " :h ack
Plug 'vim-voom/VOoM' " :Voomhelp
Plug 'tpope/vim-surround' " :h surround
Plug 'danro/rename.vim'
Plug 'vim-scripts/sql.vim--Stinson', { 'for': 'sql' }
Plug 'tpope/vim-fugitive'
"Plug 'vim-scripts/Align'
"Plug 'vim-scripts/SQLUtilities', { 'for': 'sql' } " Dependant on Align plugin - [range]SQLUFormatter(..list..)
Plug 'chrisbra/Recover.vim' " :FinishRecovery - in the recovered window, deletes swapfile closes the diff window and finishes everything up
Plug 'tpope/vim-abolish' " :%S / :%Subvert
Plug 'cespare/vim-toml', { 'for': 'toml' }
Plug 'isRuslan/vim-es6', { 'for': 'javascript' }
Plug 'fatih/vim-go', { 'for': 'go' }
Plug 'wlangstroth/vim-racket', { 'for': 'racket' }
Plug 'moll/vim-node', { 'for': 'javascript' }
Plug 'vim-utils/vim-man' "g/ - option search
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'airblade/vim-rooter'
Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
Plug 'RRethy/vim-illuminate' " https://github.com/RRethy/vim-illuminate
Plug 'vim-scripts/applescript.vim'
Plug 'jvirtanen/vim-octave'
Plug 'inside/vim-search-pulse'
Plug 'eraserhd/parinfer-rust', {'do': 'cargo build --release'}
Plug 'junegunn/rainbow_parentheses.vim'

" turn on by default
augroup rainbow_lisp
  autocmd!
  autocmd FileType lisp,clojure,scheme,racket RainbowParentheses
augroup END

" vim-illuminate
let g:Illuminate_ftblacklist = ['nerdtree', 'markdown']

" vim-javscript
let g:javascript_plugin_jsdoc = 1

" vim-rooter
let g:rooter_silent_chdir = 1 " To stop vim-rooter echoing the project directory:

" YouCompleteMe
nnoremap <Leader>yr :YcmCompleter RefactorRename<Space>
nnoremap <Leader>yg :YcmCompleter GoTo<Enter>
nnoremap <Leader>yd :YcmCompleter GoToDefinition<Enter>
nnoremap <Leader>yf :YcmCompleter GoToReferences<Enter>

" vim-markdown
"let g:markdown_folding = 1 " This make things slow https://github.com/gabrielelana/vim-markdown/issues/58
set nofoldenable " to not fold when opening a file https://stackoverflow.com/questions/8316139/how-to-set-the-default-to-unfolded-when-you-open-a-file
set conceallevel=2 " to conceal _, * used for italic or bold

" Syntastic
" To avoid "syntastic: error: checker racket/racket: checks disabled for security reasons; set g:syntastic_enable_racket_racket_checker to 1 to override"
" - https://github.com/vim-syntastic/syntastic/blob/master/doc/syntastic-checkers.txt#L5372
let g:syntastic_enable_racket_racket_checker=1

" disable for python as it's too slow
" https://vi.stackexchange.com/questions/2954/how-do-i-disable-syntastic-for-python-files
let g:syntastic_mode_map = { 'passive_filetypes': ['python'] }

" Nerdtree
map <C-n> :NERDTreeToggle<CR>
map <C-m> :NERDTree %:p:h<CR>
" close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Fugitive
nnoremap <Leader>gs :Gstatus<CR>
nnoremap <Leader>gc :Gcommit<CR>
nnoremap <Leader>gd :Gdiff<CR>
nnoremap <Leader>gb :Gblame<CR>
nnoremap <Leader>gg :Ggrep<Space>

" easymotion
" <Leader><Leader>w - word motion
" <Leader><Leader>j/k - down/up
" <Leader><Leader>f + <character> - jump to the character
let g:EasyMotion_smartcase = 1
let g:EasyMotion_use_smartsign_us = 1 " US layout
nmap <Leader>f <Leader><Leader>f
nmap <Leader>F <Leader><Leader>F
nmap <Leader>j <Leader><Leader>j
nmap <Leader>k <Leader><Leader>k

" fzf
nmap <C-L> :Files<Enter>
nmap <Leader>zf :Files<Enter>
nmap <Leader>zb :Buffers<Enter>
nmap <Leader>za :Ag<Space>
nmap <Leader>zl :Lines<Space>
nmap <Leader>zc :Commits<Enter>
nmap <Leader>zv :BCommits<Enter>
nmap <Leader>zz :Commands<Enter>
nmap <Leader>zhh :History<Enter>
nmap <Leader>zh: :History:<Enter>
nmap <Leader>zh/ :History/<Enter>

" VOom
nnoremap <silent> <Leader>mm :Voom markdown<CR>
nnoremap <silent> <Leader>mt :Voomtoggle<CR>
nnoremap <silent> <Leader>mq :Voomquit<CR>
let g:voom_tree_width = 45

" close vim if the only window left open is a VOom tree
autocmd bufenter * if (winnr("$") == 1 && expand("%:e") =~ "VOOM") | q | endif

" SQLUtilities
vnoremap <Leader>ms :SQLUFormatter<CR>

" NerdCommenter
nmap <silent> <C-_> <Leader>c<Space>
vmap <silent> <C-_> <Leader>c<Space>

" https://coderwall.com/p/ftqcla/markdown-with-fenced-code-blocks-in-vim
" https://github.com/github/linguist/blob/master/lib/linguist/languages.yml
" delete most of them as it slows down file loading - ['coffee', 'css', 'javascript', 'js=javascript', 'json=javascript', 'ruby', 'sql', 'xml', 'java', 'python', 'sh', 'html', 'clojure', 'yaml', 'applescript', 'go', 'vim', 'awk', 'groovy']
let g:markdown_fenced_languages = ['javascript', 'js=javascript', 'json=javascript', 'sh', 'sql', 'python', 'octave']

call plug#end()
" }}}

" Auto Commands {{{

" Automatically cd into the directory that the file is in
" https://github.com/tpope/vim-fugitive/issues/3
autocm BufEnter * if expand('%:p') !~ '://' | :lchdir %:p:h | endif

" Remove any trailing whitespace that is in the file
autocmd BufRead,BufWrite * if ! &bin | silent! %s/\s\+$//ge | endif

" Improve syntax highlighting
autocmd BufRead,BufNewFile *.md set filetype=markdown

" for html close tag shortcut
autocmd FileType html set omnifunc=xmlcomplete#CompleteTags

"}}}

" Misc Settings {{{

" Use vim settings, rather then vi settings
" This must be first, because it changes other options as a side effect.
set nocompatible

" Folding Stuffs
set foldmethod=marker

" Needed for Syntax Highlighting
filetype plugin indent on
syntax enable

" Default tab settings
set smarttab
set shiftround
set shiftwidth=2
set softtabstop=2 " for backspace
set tabstop=2
set expandtab
set autoindent

autocmd FileType python setlocal shiftwidth=4 softtabstop=4 tabstop=4
autocmd FileType java setlocal shiftwidth=4 softtabstop=4 tabstop=4

" Cool tab completion stuff
set wildmenu
set wildmode=list:longest,full

" Show line numbers
set number

" Search settings
set ignorecase
set incsearch
set hlsearch

" Backspace on EOL, start, indent
set backspace=eol,start,indent

set history=1000
set undolevels=1000

" You should make the directories
set backup
set backupdir=~/.vim/backup
set directory=~/.vim/swap

" encoding and line ending settings
set encoding=utf8
set fileencodings=utf8,cp949,latin1,utf-16le
set fileformat=unix
set fileformats=unix,dos

"}}}
"
"{{{Look and Feel

set background=dark

if has("gui_running")
	colorscheme Tomorrow-Night
	set guioptions-=T " Remove Toolbar
	set guifont=나눔고딕코딩:h13:cHANGEUL

	" Redefine menus for Korean
	let $LANG = 'ko_KR.UTF-8'
	source $VIMRUNTIME/delmenu.vim
	source $VIMRUNTIME/menu.vim
else
	colorscheme Tomorrow-Night-Bright
	" Enable mouse support in terminal
	set mouse=a
endif

"Status line
set laststatus=2
set statusline=%F%m%r%h%w\ (%{&ff}){%Y}\ [%l,%v][%p%%]\ %{strftime(\"%y/%m/%d\")}

" }}}

"{{{ Functions

" Open URL in browser
function! Browser()
	let line = getline(".")
	let line = matchstr(line, "http[^ `]*")
	" Should escape to prevent replaced with registers
	let line = escape(line, "#?&;|%")
	if !empty(line)
		if has("mac")
      " Need chrome script in $PATH
			exec "!open ".line
		elseif has("unix")
			exec "!google-chrome ".line
		endif
	else
		echo "No URL found"
	endif
endfunction

" Open browser
nnoremap <Leader>b :call Browser()<CR><CR>

" Paste Toggle
let paste_mode = 0 " 0 = normal, 1 = paste
func! Paste_on_off()
  if g:paste_mode == 0
      set paste
    let g:paste_mode = 1
  else
    set nopaste
    let g:paste_mode = 0
  endif
  return
endfunc

" Run current file on shell
nnoremap <F5> :w<CR> :!./%<CR>

" Run current file on shell and read result
nnoremap <F6> :w<CR> :r !./%<CR>

" Paste Mode!
nnoremap <silent> <F9> :call Paste_on_off()<CR>
set pastetoggle=<F9>

"}}}

"{{{ Mappings


" Copy file path to clipboard
" https://stackoverflow.com/a/954336/524588
noremap <silent> <F4> :let @+=expand("%:p")<CR>

" https://stackoverflow.com/a/27878200/524588
inoremap <C-e> <Esc>A
inoremap <C-a> <Esc>I

" New Tab
nnoremap <C-t> :tabnew<CR>

" Next Tab
nnoremap <silent> <C-k> :tabnext<CR>

" Previous Tab
nnoremap <silent> <C-j> :tabprevious<CR>

" New Tab
nnoremap <silent> <C-t> :tabnew<CR>

" Edit vimrc
nnoremap <silent> <Leader>ev :tabnew<CR>:e ~/.vimrc<CR>

" Up and down are more logical with g..
nnoremap <silent> k gk
nnoremap <silent> j gj
vnoremap <silent> k gk
vnoremap <silent> j gj

nnoremap <silent> gk k
nnoremap <silent> gj j
vnoremap <silent> gk k
vnoremap <silent> gj j

inoremap <silent> <Up> <Esc>gka
inoremap <silent> <Down> <Esc>gja

" Space will toggle folds!
" nnoremap <space> za

" Scroll to put the searched word in the middle
map N Nzz
map n nzz

" Turn off highlight
nnoremap <silent> <Leader>n :noh<CR>

" Easy escape
inoremap jk <Esc>
inoremap jl <Esc>o

" Diff shortcuts
nnoremap <silent> <Leader>dl :diffthis<CR> <C-w>l :diffthis<CR> <C-w>h
nnoremap <silent> <Leader>dh :diffthis<CR> <C-w>h :diffthis<CR> <C-w>l
nnoremap <silent> <leader>do :diffoff<CR>

" Delete all
nnoremap <silent> <Leader>dd ggdG

" Yank all
nnoremap <Leader>a :%y<CR>

" Move between windows
let i = 1
while i <= 9
  execute 'nnoremap <Leader>' . i . ' :' . i . 'wincmd w<CR>'
  let i = i + 1
endwhile

" Close windows
let i = 1
while i <= 9
  execute 'nnoremap <Leader>c' . i . ' :' . i . 'wincmd w<CR>:q<CR>'
  let i = i + 1
endwhile

" Easy buffer switch
nnoremap <silent> <Leader>;; :b#<CR>
"nnoremap <C-L> :ls<CR>:b<SPACE>

let i = 1
while i <= 9
  execute 'nnoremap <Leader>;' . i . ' :b' . i . '<CR>'
  let i = i + 1
endwhile

" Easy load
nnoremap <leader>l :e<SPACE>

" Mistake proofing
cnoremap W<CR> w<CR>
cnoremap Q<CR> q<CR>
cnoremap Q!<CR> q!<CR>
cnoremap Wq<CR> wq<CR>

" Change cursor shape in different modes(In OSX)
" http://vim.wikia.com/wiki/Change_cursor_shape_in_different_modes
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"

" Toggle invisibles
set lcs=tab:›\ ,trail:·,eol:¬,nbsp:_
set fcs=fold:-
nnoremap <silent> <leader>i :set nolist!<CR>

" Create Blank Newlines and stay in Normal mode
" http://superuser.com/a/607193/81915
nnoremap <silent> zj :call append(line('.'), '')<CR>
nnoremap <silent> zk :call append(line('.')-1, '')<CR>

nnoremap <silent> zh i<Space><Right><Esc>
nnoremap <silent> zl a<Space><Left><Esc>

" Save with root permission inside Vim
cmap w!! w !sudo tee > /dev/null %

" Open new window
nnoremap <leader>wh :vnew<CR>
nnoremap <leader>wl :rightbelow vertical new<CR>
nnoremap <leader>wj :below new<CR>

" Clock
nnoremap <Leader>da :echo system("date")<CR>

nnoremap <Leader>s :up<CR>
nnoremap <Leader><Leader>s :set spell!<CR>

nnoremap <Leader>q :q<CR>

vnoremap <Leader>p "0p

inoremap <C-B> <C-C>bhi
inoremap <C-F> <C-C>ea

nnoremap <Leader>r :reg<CR>

" https://vi.stackexchange.com/a/9002/3225
function! GoogleSearch()
    let searchterm = getreg("g")
    exec "!open \"http://google.com/search?q=" . searchterm . "\" &"
endfunction
vnoremap <Leader>g "gy<Esc>:call GoogleSearch()<CR><CR>

" copy without newline
" https://stackoverflow.com/questions/20165596/select-entire-line-in-vim-without-the-new-line-character
nnoremap <Leader>t yg_
"}}}

" OS Specific {{{

if has("mac")
  " From Vim 7.3, it can yank to and paste from clipboard
  set clipboard=unnamed
else
  " For x window. From Vim 7.3.74
  set clipboard=unnamedplus
endif

" }}}

